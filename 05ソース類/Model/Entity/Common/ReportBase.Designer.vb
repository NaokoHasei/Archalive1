'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3603
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReportBase"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReportBase
    Inherits Global.System.Data.DataSet
    
    Private tableS_PRISET As S_PRISETDataTable
    
    Private tableS_REPORTSET As S_REPORTSETDataTable
    
    Private tableWT_PRINTBASE_1 As WT_PRINTBASE_1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("S_PRISET")) Is Nothing) Then
                MyBase.Tables.Add(New S_PRISETDataTable(ds.Tables("S_PRISET")))
            End If
            If (Not (ds.Tables("S_REPORTSET")) Is Nothing) Then
                MyBase.Tables.Add(New S_REPORTSETDataTable(ds.Tables("S_REPORTSET")))
            End If
            If (Not (ds.Tables("WT_PRINTBASE_1")) Is Nothing) Then
                MyBase.Tables.Add(New WT_PRINTBASE_1DataTable(ds.Tables("WT_PRINTBASE_1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_PRISET() As S_PRISETDataTable
        Get
            Return Me.tableS_PRISET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_REPORTSET() As S_REPORTSETDataTable
        Get
            Return Me.tableS_REPORTSET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WT_PRINTBASE_1() As WT_PRINTBASE_1DataTable
        Get
            Return Me.tableWT_PRINTBASE_1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReportBase = CType(MyBase.Clone,ReportBase)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("S_PRISET")) Is Nothing) Then
                MyBase.Tables.Add(New S_PRISETDataTable(ds.Tables("S_PRISET")))
            End If
            If (Not (ds.Tables("S_REPORTSET")) Is Nothing) Then
                MyBase.Tables.Add(New S_REPORTSETDataTable(ds.Tables("S_REPORTSET")))
            End If
            If (Not (ds.Tables("WT_PRINTBASE_1")) Is Nothing) Then
                MyBase.Tables.Add(New WT_PRINTBASE_1DataTable(ds.Tables("WT_PRINTBASE_1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableS_PRISET = CType(MyBase.Tables("S_PRISET"),S_PRISETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_PRISET) Is Nothing) Then
                Me.tableS_PRISET.InitVars
            End If
        End If
        Me.tableS_REPORTSET = CType(MyBase.Tables("S_REPORTSET"),S_REPORTSETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_REPORTSET) Is Nothing) Then
                Me.tableS_REPORTSET.InitVars
            End If
        End If
        Me.tableWT_PRINTBASE_1 = CType(MyBase.Tables("WT_PRINTBASE_1"),WT_PRINTBASE_1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableWT_PRINTBASE_1) Is Nothing) Then
                Me.tableWT_PRINTBASE_1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReportBase"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ReportBase.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableS_PRISET = New S_PRISETDataTable
        MyBase.Tables.Add(Me.tableS_PRISET)
        Me.tableS_REPORTSET = New S_REPORTSETDataTable
        MyBase.Tables.Add(Me.tableS_REPORTSET)
        Me.tableWT_PRINTBASE_1 = New WT_PRINTBASE_1DataTable
        MyBase.Tables.Add(Me.tableWT_PRINTBASE_1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_PRISET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_REPORTSET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWT_PRINTBASE_1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReportBase = New ReportBase
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub S_PRISETRowChangeEventHandler(ByVal sender As Object, ByVal e As S_PRISETRowChangeEvent)
    
    Public Delegate Sub S_REPORTSETRowChangeEventHandler(ByVal sender As Object, ByVal e As S_REPORTSETRowChangeEvent)
    
    Public Delegate Sub WT_PRINTBASE_1RowChangeEventHandler(ByVal sender As Object, ByVal e As WT_PRINTBASE_1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_PRISETDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_PRISETRow)
        
        Private columnPGID As Global.System.Data.DataColumn
        
        Private columnSNO As Global.System.Data.DataColumn
        
        Private columnREPSETNO As Global.System.Data.DataColumn
        
        Private columnLISTNAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_PRISET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPSETNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPSETNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LISTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLISTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_PRISETRow
            Get
                Return CType(Me.Rows(index),S_PRISETRow)
            End Get
        End Property
        
        Public Event S_PRISETRowChanging As S_PRISETRowChangeEventHandler
        
        Public Event S_PRISETRowChanged As S_PRISETRowChangeEventHandler
        
        Public Event S_PRISETRowDeleting As S_PRISETRowChangeEventHandler
        
        Public Event S_PRISETRowDeleted As S_PRISETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_PRISETRow(ByVal row As S_PRISETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_PRISETRow(ByVal PGID As String, ByVal SNO As Decimal, ByVal REPSETNO As Decimal, ByVal LISTNAME As String) As S_PRISETRow
            Dim rowS_PRISETRow As S_PRISETRow = CType(Me.NewRow,S_PRISETRow)
            Dim columnValuesArray() As Object = New Object() {PGID, SNO, REPSETNO, LISTNAME}
            rowS_PRISETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_PRISETRow)
            Return rowS_PRISETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPGIDSNO(ByVal PGID As String, ByVal SNO As Decimal) As S_PRISETRow
            Return CType(Me.Rows.Find(New Object() {PGID, SNO}),S_PRISETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_PRISETDataTable = CType(MyBase.Clone,S_PRISETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_PRISETDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPGID = MyBase.Columns("PGID")
            Me.columnSNO = MyBase.Columns("SNO")
            Me.columnREPSETNO = MyBase.Columns("REPSETNO")
            Me.columnLISTNAME = MyBase.Columns("LISTNAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPGID = New Global.System.Data.DataColumn("PGID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGID)
            Me.columnSNO = New Global.System.Data.DataColumn("SNO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSNO)
            Me.columnREPSETNO = New Global.System.Data.DataColumn("REPSETNO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPSETNO)
            Me.columnLISTNAME = New Global.System.Data.DataColumn("LISTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLISTNAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPGID, Me.columnSNO}, true))
            Me.columnPGID.AllowDBNull = false
            Me.columnPGID.MaxLength = 20
            Me.columnSNO.AllowDBNull = false
            Me.columnREPSETNO.AllowDBNull = false
            Me.columnLISTNAME.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_PRISETRow() As S_PRISETRow
            Return CType(Me.NewRow,S_PRISETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_PRISETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_PRISETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_PRISETRowChangedEvent) Is Nothing) Then
                RaiseEvent S_PRISETRowChanged(Me, New S_PRISETRowChangeEvent(CType(e.Row,S_PRISETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_PRISETRowChangingEvent) Is Nothing) Then
                RaiseEvent S_PRISETRowChanging(Me, New S_PRISETRowChangeEvent(CType(e.Row,S_PRISETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_PRISETRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_PRISETRowDeleted(Me, New S_PRISETRowChangeEvent(CType(e.Row,S_PRISETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_PRISETRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_PRISETRowDeleting(Me, New S_PRISETRowChangeEvent(CType(e.Row,S_PRISETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_PRISETRow(ByVal row As S_PRISETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportBase = New ReportBase
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_PRISETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_REPORTSETDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_REPORTSETRow)
        
        Private columnREPORTSETTINGNO As Global.System.Data.DataColumn
        
        Private columnPRINTER As Global.System.Data.DataColumn
        
        Private columnPORT As Global.System.Data.DataColumn
        
        Private columnPAPERBIN As Global.System.Data.DataColumn
        
        Private columnPAPERSIZE As Global.System.Data.DataColumn
        
        Private columnORIENTATION As Global.System.Data.DataColumn
        
        Private columnPAGETOPMARGIN As Global.System.Data.DataColumn
        
        Private columnPAGEBOTTOMMARGIN As Global.System.Data.DataColumn
        
        Private columnPAGELEFTMARGIN As Global.System.Data.DataColumn
        
        Private columnPAGERIGHTMARGIN As Global.System.Data.DataColumn
        
        Private columnMEMO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_REPORTSET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPORTSETTINGNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPORTSETTINGNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRINTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAPERBINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAPERBIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAPERSIZEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAPERSIZE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORIENTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORIENTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGETOPMARGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGETOPMARGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGEBOTTOMMARGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGEBOTTOMMARGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGELEFTMARGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGELEFTMARGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGERIGHTMARGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGERIGHTMARGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_REPORTSETRow
            Get
                Return CType(Me.Rows(index),S_REPORTSETRow)
            End Get
        End Property
        
        Public Event S_REPORTSETRowChanging As S_REPORTSETRowChangeEventHandler
        
        Public Event S_REPORTSETRowChanged As S_REPORTSETRowChangeEventHandler
        
        Public Event S_REPORTSETRowDeleting As S_REPORTSETRowChangeEventHandler
        
        Public Event S_REPORTSETRowDeleted As S_REPORTSETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_REPORTSETRow(ByVal row As S_REPORTSETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_REPORTSETRow(ByVal REPORTSETTINGNO As String, ByVal PRINTER As String, ByVal PORT As String, ByVal PAPERBIN As String, ByVal PAPERSIZE As String, ByVal ORIENTATION As String, ByVal PAGETOPMARGIN As Decimal, ByVal PAGEBOTTOMMARGIN As Decimal, ByVal PAGELEFTMARGIN As Decimal, ByVal PAGERIGHTMARGIN As Decimal, ByVal MEMO As String) As S_REPORTSETRow
            Dim rowS_REPORTSETRow As S_REPORTSETRow = CType(Me.NewRow,S_REPORTSETRow)
            Dim columnValuesArray() As Object = New Object() {REPORTSETTINGNO, PRINTER, PORT, PAPERBIN, PAPERSIZE, ORIENTATION, PAGETOPMARGIN, PAGEBOTTOMMARGIN, PAGELEFTMARGIN, PAGERIGHTMARGIN, MEMO}
            rowS_REPORTSETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_REPORTSETRow)
            Return rowS_REPORTSETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByREPORTSETTINGNO(ByVal REPORTSETTINGNO As String) As S_REPORTSETRow
            Return CType(Me.Rows.Find(New Object() {REPORTSETTINGNO}),S_REPORTSETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_REPORTSETDataTable = CType(MyBase.Clone,S_REPORTSETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_REPORTSETDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnREPORTSETTINGNO = MyBase.Columns("REPORTSETTINGNO")
            Me.columnPRINTER = MyBase.Columns("PRINTER")
            Me.columnPORT = MyBase.Columns("PORT")
            Me.columnPAPERBIN = MyBase.Columns("PAPERBIN")
            Me.columnPAPERSIZE = MyBase.Columns("PAPERSIZE")
            Me.columnORIENTATION = MyBase.Columns("ORIENTATION")
            Me.columnPAGETOPMARGIN = MyBase.Columns("PAGETOPMARGIN")
            Me.columnPAGEBOTTOMMARGIN = MyBase.Columns("PAGEBOTTOMMARGIN")
            Me.columnPAGELEFTMARGIN = MyBase.Columns("PAGELEFTMARGIN")
            Me.columnPAGERIGHTMARGIN = MyBase.Columns("PAGERIGHTMARGIN")
            Me.columnMEMO = MyBase.Columns("MEMO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnREPORTSETTINGNO = New Global.System.Data.DataColumn("REPORTSETTINGNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPORTSETTINGNO)
            Me.columnPRINTER = New Global.System.Data.DataColumn("PRINTER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINTER)
            Me.columnPORT = New Global.System.Data.DataColumn("PORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORT)
            Me.columnPAPERBIN = New Global.System.Data.DataColumn("PAPERBIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAPERBIN)
            Me.columnPAPERSIZE = New Global.System.Data.DataColumn("PAPERSIZE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAPERSIZE)
            Me.columnORIENTATION = New Global.System.Data.DataColumn("ORIENTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORIENTATION)
            Me.columnPAGETOPMARGIN = New Global.System.Data.DataColumn("PAGETOPMARGIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGETOPMARGIN)
            Me.columnPAGEBOTTOMMARGIN = New Global.System.Data.DataColumn("PAGEBOTTOMMARGIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGEBOTTOMMARGIN)
            Me.columnPAGELEFTMARGIN = New Global.System.Data.DataColumn("PAGELEFTMARGIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGELEFTMARGIN)
            Me.columnPAGERIGHTMARGIN = New Global.System.Data.DataColumn("PAGERIGHTMARGIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGERIGHTMARGIN)
            Me.columnMEMO = New Global.System.Data.DataColumn("MEMO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREPORTSETTINGNO}, true))
            Me.columnREPORTSETTINGNO.AllowDBNull = false
            Me.columnREPORTSETTINGNO.Unique = true
            Me.columnREPORTSETTINGNO.MaxLength = 2
            Me.columnPRINTER.MaxLength = 60
            Me.columnPORT.MaxLength = 40
            Me.columnPAPERBIN.MaxLength = 10
            Me.columnPAPERSIZE.MaxLength = 10
            Me.columnORIENTATION.MaxLength = 10
            Me.columnPAGETOPMARGIN.AllowDBNull = false
            Me.columnPAGEBOTTOMMARGIN.AllowDBNull = false
            Me.columnPAGELEFTMARGIN.AllowDBNull = false
            Me.columnPAGERIGHTMARGIN.AllowDBNull = false
            Me.columnMEMO.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_REPORTSETRow() As S_REPORTSETRow
            Return CType(Me.NewRow,S_REPORTSETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_REPORTSETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_REPORTSETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_REPORTSETRowChangedEvent) Is Nothing) Then
                RaiseEvent S_REPORTSETRowChanged(Me, New S_REPORTSETRowChangeEvent(CType(e.Row,S_REPORTSETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_REPORTSETRowChangingEvent) Is Nothing) Then
                RaiseEvent S_REPORTSETRowChanging(Me, New S_REPORTSETRowChangeEvent(CType(e.Row,S_REPORTSETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_REPORTSETRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_REPORTSETRowDeleted(Me, New S_REPORTSETRowChangeEvent(CType(e.Row,S_REPORTSETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_REPORTSETRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_REPORTSETRowDeleting(Me, New S_REPORTSETRowChangeEvent(CType(e.Row,S_REPORTSETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_REPORTSETRow(ByVal row As S_REPORTSETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportBase = New ReportBase
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_REPORTSETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WT_PRINTBASE_1DataTable
        Inherits Global.System.Data.TypedTableBase(Of WT_PRINTBASE_1Row)
        
        Private columnPCNAME As Global.System.Data.DataColumn
        
        Private columnPGID As Global.System.Data.DataColumn
        
        Private columnTONYACODE As Global.System.Data.DataColumn
        
        Private columnGYONO As Global.System.Data.DataColumn
        
        Private columnCODE_1 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_1 As Global.System.Data.DataColumn
        
        Private columnCODE_2 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_2 As Global.System.Data.DataColumn
        
        Private columnCODE_3 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_3 As Global.System.Data.DataColumn
        
        Private columnCODE_4 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_4 As Global.System.Data.DataColumn
        
        Private columnCODE_5 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_5 As Global.System.Data.DataColumn
        
        Private columnCODE_6 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_6 As Global.System.Data.DataColumn
        
        Private columnCODE_7 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_7 As Global.System.Data.DataColumn
        
        Private columnCODE_8 As Global.System.Data.DataColumn
        
        Private columnKINGAKU_8 As Global.System.Data.DataColumn
        
        Private columnKIJITUNAISIHARAIBI As Global.System.Data.DataColumn
        
        Private columnTONYANAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WT_PRINTBASE_1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TONYACODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTONYACODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GYONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGYONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODE_8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE_8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KINGAKU_8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnKINGAKU_8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KIJITUNAISIHARAIBIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKIJITUNAISIHARAIBI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TONYANAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTONYANAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WT_PRINTBASE_1Row
            Get
                Return CType(Me.Rows(index),WT_PRINTBASE_1Row)
            End Get
        End Property
        
        Public Event WT_PRINTBASE_1RowChanging As WT_PRINTBASE_1RowChangeEventHandler
        
        Public Event WT_PRINTBASE_1RowChanged As WT_PRINTBASE_1RowChangeEventHandler
        
        Public Event WT_PRINTBASE_1RowDeleting As WT_PRINTBASE_1RowChangeEventHandler
        
        Public Event WT_PRINTBASE_1RowDeleted As WT_PRINTBASE_1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWT_PRINTBASE_1Row(ByVal row As WT_PRINTBASE_1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWT_PRINTBASE_1Row( _
                    ByVal PCNAME As String,  _
                    ByVal PGID As String,  _
                    ByVal TONYACODE As String,  _
                    ByVal GYONO As Decimal,  _
                    ByVal CODE_1 As String,  _
                    ByVal KINGAKU_1 As Decimal,  _
                    ByVal CODE_2 As String,  _
                    ByVal KINGAKU_2 As Decimal,  _
                    ByVal CODE_3 As String,  _
                    ByVal KINGAKU_3 As Decimal,  _
                    ByVal CODE_4 As String,  _
                    ByVal KINGAKU_4 As Decimal,  _
                    ByVal CODE_5 As String,  _
                    ByVal KINGAKU_5 As Decimal,  _
                    ByVal CODE_6 As String,  _
                    ByVal KINGAKU_6 As Decimal,  _
                    ByVal CODE_7 As String,  _
                    ByVal KINGAKU_7 As Decimal,  _
                    ByVal CODE_8 As String,  _
                    ByVal KINGAKU_8 As Decimal,  _
                    ByVal KIJITUNAISIHARAIBI As Date,  _
                    ByVal TONYANAME As String) As WT_PRINTBASE_1Row
            Dim rowWT_PRINTBASE_1Row As WT_PRINTBASE_1Row = CType(Me.NewRow,WT_PRINTBASE_1Row)
            Dim columnValuesArray() As Object = New Object() {PCNAME, PGID, TONYACODE, GYONO, CODE_1, KINGAKU_1, CODE_2, KINGAKU_2, CODE_3, KINGAKU_3, CODE_4, KINGAKU_4, CODE_5, KINGAKU_5, CODE_6, KINGAKU_6, CODE_7, KINGAKU_7, CODE_8, KINGAKU_8, KIJITUNAISIHARAIBI, TONYANAME}
            rowWT_PRINTBASE_1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowWT_PRINTBASE_1Row)
            Return rowWT_PRINTBASE_1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPCNAMEPGIDTONYACODEGYONO(ByVal PCNAME As String, ByVal PGID As String, ByVal TONYACODE As String, ByVal GYONO As Decimal) As WT_PRINTBASE_1Row
            Return CType(Me.Rows.Find(New Object() {PCNAME, PGID, TONYACODE, GYONO}),WT_PRINTBASE_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WT_PRINTBASE_1DataTable = CType(MyBase.Clone,WT_PRINTBASE_1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WT_PRINTBASE_1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPCNAME = MyBase.Columns("PCNAME")
            Me.columnPGID = MyBase.Columns("PGID")
            Me.columnTONYACODE = MyBase.Columns("TONYACODE")
            Me.columnGYONO = MyBase.Columns("GYONO")
            Me.columnCODE_1 = MyBase.Columns("CODE_1")
            Me.columnKINGAKU_1 = MyBase.Columns("KINGAKU_1")
            Me.columnCODE_2 = MyBase.Columns("CODE_2")
            Me.columnKINGAKU_2 = MyBase.Columns("KINGAKU_2")
            Me.columnCODE_3 = MyBase.Columns("CODE_3")
            Me.columnKINGAKU_3 = MyBase.Columns("KINGAKU_3")
            Me.columnCODE_4 = MyBase.Columns("CODE_4")
            Me.columnKINGAKU_4 = MyBase.Columns("KINGAKU_4")
            Me.columnCODE_5 = MyBase.Columns("CODE_5")
            Me.columnKINGAKU_5 = MyBase.Columns("KINGAKU_5")
            Me.columnCODE_6 = MyBase.Columns("CODE_6")
            Me.columnKINGAKU_6 = MyBase.Columns("KINGAKU_6")
            Me.columnCODE_7 = MyBase.Columns("CODE_7")
            Me.columnKINGAKU_7 = MyBase.Columns("KINGAKU_7")
            Me.columnCODE_8 = MyBase.Columns("CODE_8")
            Me.columnKINGAKU_8 = MyBase.Columns("KINGAKU_8")
            Me.columnKIJITUNAISIHARAIBI = MyBase.Columns("KIJITUNAISIHARAIBI")
            Me.columnTONYANAME = MyBase.Columns("TONYANAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPCNAME = New Global.System.Data.DataColumn("PCNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCNAME)
            Me.columnPGID = New Global.System.Data.DataColumn("PGID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGID)
            Me.columnTONYACODE = New Global.System.Data.DataColumn("TONYACODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTONYACODE)
            Me.columnGYONO = New Global.System.Data.DataColumn("GYONO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGYONO)
            Me.columnCODE_1 = New Global.System.Data.DataColumn("CODE_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_1)
            Me.columnKINGAKU_1 = New Global.System.Data.DataColumn("KINGAKU_1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_1)
            Me.columnCODE_2 = New Global.System.Data.DataColumn("CODE_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_2)
            Me.columnKINGAKU_2 = New Global.System.Data.DataColumn("KINGAKU_2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_2)
            Me.columnCODE_3 = New Global.System.Data.DataColumn("CODE_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_3)
            Me.columnKINGAKU_3 = New Global.System.Data.DataColumn("KINGAKU_3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_3)
            Me.columnCODE_4 = New Global.System.Data.DataColumn("CODE_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_4)
            Me.columnKINGAKU_4 = New Global.System.Data.DataColumn("KINGAKU_4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_4)
            Me.columnCODE_5 = New Global.System.Data.DataColumn("CODE_5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_5)
            Me.columnKINGAKU_5 = New Global.System.Data.DataColumn("KINGAKU_5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_5)
            Me.columnCODE_6 = New Global.System.Data.DataColumn("CODE_6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_6)
            Me.columnKINGAKU_6 = New Global.System.Data.DataColumn("KINGAKU_6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_6)
            Me.columnCODE_7 = New Global.System.Data.DataColumn("CODE_7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_7)
            Me.columnKINGAKU_7 = New Global.System.Data.DataColumn("KINGAKU_7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_7)
            Me.columnCODE_8 = New Global.System.Data.DataColumn("CODE_8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE_8)
            Me.columnKINGAKU_8 = New Global.System.Data.DataColumn("KINGAKU_8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKINGAKU_8)
            Me.columnKIJITUNAISIHARAIBI = New Global.System.Data.DataColumn("KIJITUNAISIHARAIBI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKIJITUNAISIHARAIBI)
            Me.columnTONYANAME = New Global.System.Data.DataColumn("TONYANAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTONYANAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPCNAME, Me.columnPGID, Me.columnTONYACODE, Me.columnGYONO}, true))
            Me.columnPCNAME.AllowDBNull = false
            Me.columnPCNAME.MaxLength = 15
            Me.columnPGID.AllowDBNull = false
            Me.columnPGID.MaxLength = 20
            Me.columnTONYACODE.AllowDBNull = false
            Me.columnTONYACODE.MaxLength = 2
            Me.columnGYONO.AllowDBNull = false
            Me.columnCODE_1.MaxLength = 4
            Me.columnKINGAKU_1.AllowDBNull = false
            Me.columnCODE_2.MaxLength = 4
            Me.columnKINGAKU_2.AllowDBNull = false
            Me.columnCODE_3.MaxLength = 4
            Me.columnKINGAKU_3.AllowDBNull = false
            Me.columnCODE_4.MaxLength = 4
            Me.columnKINGAKU_4.AllowDBNull = false
            Me.columnCODE_5.MaxLength = 4
            Me.columnKINGAKU_5.AllowDBNull = false
            Me.columnCODE_6.MaxLength = 4
            Me.columnKINGAKU_6.AllowDBNull = false
            Me.columnCODE_7.MaxLength = 4
            Me.columnKINGAKU_7.AllowDBNull = false
            Me.columnCODE_8.MaxLength = 4
            Me.columnKINGAKU_8.AllowDBNull = false
            Me.columnTONYANAME.MaxLength = 16
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWT_PRINTBASE_1Row() As WT_PRINTBASE_1Row
            Return CType(Me.NewRow,WT_PRINTBASE_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WT_PRINTBASE_1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WT_PRINTBASE_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WT_PRINTBASE_1RowChangedEvent) Is Nothing) Then
                RaiseEvent WT_PRINTBASE_1RowChanged(Me, New WT_PRINTBASE_1RowChangeEvent(CType(e.Row,WT_PRINTBASE_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WT_PRINTBASE_1RowChangingEvent) Is Nothing) Then
                RaiseEvent WT_PRINTBASE_1RowChanging(Me, New WT_PRINTBASE_1RowChangeEvent(CType(e.Row,WT_PRINTBASE_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WT_PRINTBASE_1RowDeletedEvent) Is Nothing) Then
                RaiseEvent WT_PRINTBASE_1RowDeleted(Me, New WT_PRINTBASE_1RowChangeEvent(CType(e.Row,WT_PRINTBASE_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WT_PRINTBASE_1RowDeletingEvent) Is Nothing) Then
                RaiseEvent WT_PRINTBASE_1RowDeleting(Me, New WT_PRINTBASE_1RowChangeEvent(CType(e.Row,WT_PRINTBASE_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWT_PRINTBASE_1Row(ByVal row As WT_PRINTBASE_1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReportBase = New ReportBase
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WT_PRINTBASE_1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_PRISETRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_PRISET As S_PRISETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_PRISET = CType(Me.Table,S_PRISETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGID() As String
            Get
                Return CType(Me(Me.tableS_PRISET.PGIDColumn),String)
            End Get
            Set
                Me(Me.tableS_PRISET.PGIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SNO() As Decimal
            Get
                Return CType(Me(Me.tableS_PRISET.SNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_PRISET.SNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPSETNO() As Decimal
            Get
                Return CType(Me(Me.tableS_PRISET.REPSETNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_PRISET.REPSETNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LISTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_PRISET.LISTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_PRISET' にある列 'LISTNAME' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRISET.LISTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLISTNAMENull() As Boolean
            Return Me.IsNull(Me.tableS_PRISET.LISTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLISTNAMENull()
            Me(Me.tableS_PRISET.LISTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_REPORTSETRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_REPORTSET As S_REPORTSETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_REPORTSET = CType(Me.Table,S_REPORTSETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPORTSETTINGNO() As String
            Get
                Return CType(Me(Me.tableS_REPORTSET.REPORTSETTINGNOColumn),String)
            End Get
            Set
                Me(Me.tableS_REPORTSET.REPORTSETTINGNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRINTER() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.PRINTERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'PRINTER' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.PRINTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORT() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.PORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'PORT' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.PORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAPERBIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.PAPERBINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'PAPERBIN' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAPERBINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAPERSIZE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.PAPERSIZEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'PAPERSIZE' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAPERSIZEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORIENTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.ORIENTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'ORIENTATION' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.ORIENTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGETOPMARGIN() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTSET.PAGETOPMARGINColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAGETOPMARGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGEBOTTOMMARGIN() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTSET.PAGEBOTTOMMARGINColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAGEBOTTOMMARGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGELEFTMARGIN() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTSET.PAGELEFTMARGINColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAGELEFTMARGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGERIGHTMARGIN() As Decimal
            Get
                Return CType(Me(Me.tableS_REPORTSET.PAGERIGHTMARGINColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_REPORTSET.PAGERIGHTMARGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEMO() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_REPORTSET.MEMOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_REPORTSET' にある列 'MEMO' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_REPORTSET.MEMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRINTERNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.PRINTERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRINTERNull()
            Me(Me.tableS_REPORTSET.PRINTERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORTNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.PORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORTNull()
            Me(Me.tableS_REPORTSET.PORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAPERBINNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.PAPERBINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAPERBINNull()
            Me(Me.tableS_REPORTSET.PAPERBINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAPERSIZENull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.PAPERSIZEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAPERSIZENull()
            Me(Me.tableS_REPORTSET.PAPERSIZEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORIENTATIONNull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.ORIENTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORIENTATIONNull()
            Me(Me.tableS_REPORTSET.ORIENTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEMONull() As Boolean
            Return Me.IsNull(Me.tableS_REPORTSET.MEMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEMONull()
            Me(Me.tableS_REPORTSET.MEMOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WT_PRINTBASE_1Row
        Inherits Global.System.Data.DataRow
        
        Private tableWT_PRINTBASE_1 As WT_PRINTBASE_1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWT_PRINTBASE_1 = CType(Me.Table,WT_PRINTBASE_1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCNAME() As String
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.PCNAMEColumn),String)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.PCNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGID() As String
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.PGIDColumn),String)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.PGIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TONYACODE() As String
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.TONYACODEColumn),String)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.TONYACODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GYONO() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.GYONOColumn),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.GYONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_1() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_1Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_2() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_2Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_3' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_3() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_3Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_4() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_4' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_4() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_4Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_5() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_5' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_5() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_5Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_6() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_6' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_6() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_6Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_7() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_7' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_7() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_7Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE_8() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.CODE_8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'CODE_8' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.CODE_8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KINGAKU_8() As Decimal
            Get
                Return CType(Me(Me.tableWT_PRINTBASE_1.KINGAKU_8Column),Decimal)
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KINGAKU_8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KIJITUNAISIHARAIBI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.KIJITUNAISIHARAIBIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'KIJITUNAISIHARAIBI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.KIJITUNAISIHARAIBIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TONYANAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWT_PRINTBASE_1.TONYANAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'WT_PRINTBASE_1' にある列 'TONYANAME' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableWT_PRINTBASE_1.TONYANAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_1Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_1Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_2Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_2Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_3Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_3Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_4Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_4Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_5Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_5Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_6Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_6Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_7Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_7Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODE_8Null() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.CODE_8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODE_8Null()
            Me(Me.tableWT_PRINTBASE_1.CODE_8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKIJITUNAISIHARAIBINull() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.KIJITUNAISIHARAIBIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKIJITUNAISIHARAIBINull()
            Me(Me.tableWT_PRINTBASE_1.KIJITUNAISIHARAIBIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTONYANAMENull() As Boolean
            Return Me.IsNull(Me.tableWT_PRINTBASE_1.TONYANAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTONYANAMENull()
            Me(Me.tableWT_PRINTBASE_1.TONYANAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_PRISETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_PRISETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_PRISETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_PRISETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_REPORTSETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_REPORTSETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_REPORTSETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_REPORTSETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WT_PRINTBASE_1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WT_PRINTBASE_1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WT_PRINTBASE_1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WT_PRINTBASE_1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ReportBaseTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_PRISETTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_PRISET"
            tableMapping.ColumnMappings.Add("PGID", "PGID")
            tableMapping.ColumnMappings.Add("SNO", "SNO")
            tableMapping.ColumnMappings.Add("REPSETNO", "REPSETNO")
            tableMapping.ColumnMappings.Add("LISTNAME", "LISTNAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Model.My.MySettings.Default.DB_FSUISANConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PGID, SNO, REPSETNO, LISTNAME FROM S_PRISET WHERE (PGID = @PGID) AND (SNO "& _ 
                "= @SNO)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PGID", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "PGID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SNO", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 2, 0, "SNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ReportBase.S_PRISETDataTable, ByVal PGID As String, ByVal SNO As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PGID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PGID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PGID,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SNO,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PGID As String, ByVal SNO As Decimal) As ReportBase.S_PRISETDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PGID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PGID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PGID,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SNO,Decimal)
            Dim dataTable As ReportBase.S_PRISETDataTable = New ReportBase.S_PRISETDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_REPORTSETTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_REPORTSET"
            tableMapping.ColumnMappings.Add("REPORTSETTINGNO", "REPORTSETTINGNO")
            tableMapping.ColumnMappings.Add("PRINTER", "PRINTER")
            tableMapping.ColumnMappings.Add("PORT", "PORT")
            tableMapping.ColumnMappings.Add("PAPERBIN", "PAPERBIN")
            tableMapping.ColumnMappings.Add("PAPERSIZE", "PAPERSIZE")
            tableMapping.ColumnMappings.Add("ORIENTATION", "ORIENTATION")
            tableMapping.ColumnMappings.Add("PAGETOPMARGIN", "PAGETOPMARGIN")
            tableMapping.ColumnMappings.Add("PAGEBOTTOMMARGIN", "PAGEBOTTOMMARGIN")
            tableMapping.ColumnMappings.Add("PAGELEFTMARGIN", "PAGELEFTMARGIN")
            tableMapping.ColumnMappings.Add("PAGERIGHTMARGIN", "PAGERIGHTMARGIN")
            tableMapping.ColumnMappings.Add("MEMO", "MEMO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Model.My.MySettings.Default.DB_FSUISANConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT REPORTSETTINGNO, PRINTER, PORT, PAPERBIN, PAPERSIZE, ORIENTATION, PAGETOPM"& _ 
                "ARGIN, PAGEBOTTOMMARGIN, PAGELEFTMARGIN, PAGERIGHTMARGIN, MEMO FROM S_REPORTSET "& _ 
                "WHERE (PCNAME = @PCNAME) AND (REPORTSETTINGNO = @REPORTSETTINGNO)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCNAME", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "PCNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPORTSETTINGNO", Global.System.Data.SqlDbType.VarChar, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "REPORTSETTINGNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select * from S_REPORTSET_BASE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where REPORTSETTINGNO=@REPORTSETTINGNO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPORTSETTINGNO", Global.System.Data.SqlDbType.VarChar, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "REPORTSETTINGNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ReportBase.S_REPORTSETDataTable, ByVal PCNAME As String, ByVal REPORTSETTINGNO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PCNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PCNAME,String)
            End If
            If (REPORTSETTINGNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPORTSETTINGNO")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(REPORTSETTINGNO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PCNAME As String, ByVal REPORTSETTINGNO As String) As ReportBase.S_REPORTSETDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PCNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PCNAME,String)
            End If
            If (REPORTSETTINGNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPORTSETTINGNO")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(REPORTSETTINGNO,String)
            End If
            Dim dataTable As ReportBase.S_REPORTSETDataTable = New ReportBase.S_REPORTSETDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByBASE(ByVal dataTable As ReportBase.S_REPORTSETDataTable, ByVal REPORTSETTINGNO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (REPORTSETTINGNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPORTSETTINGNO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REPORTSETTINGNO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByBASE(ByVal REPORTSETTINGNO As String) As ReportBase.S_REPORTSETDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (REPORTSETTINGNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("REPORTSETTINGNO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REPORTSETTINGNO,String)
            End If
            Dim dataTable As ReportBase.S_REPORTSETDataTable = New ReportBase.S_REPORTSETDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WT_PRINTBASE_1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WT_PRINTBASE_1"
            tableMapping.ColumnMappings.Add("PCNAME", "PCNAME")
            tableMapping.ColumnMappings.Add("PGID", "PGID")
            tableMapping.ColumnMappings.Add("TONYACODE", "TONYACODE")
            tableMapping.ColumnMappings.Add("GYONO", "GYONO")
            tableMapping.ColumnMappings.Add("CODE_1", "CODE_1")
            tableMapping.ColumnMappings.Add("KINGAKU_1", "KINGAKU_1")
            tableMapping.ColumnMappings.Add("CODE_2", "CODE_2")
            tableMapping.ColumnMappings.Add("KINGAKU_2", "KINGAKU_2")
            tableMapping.ColumnMappings.Add("CODE_3", "CODE_3")
            tableMapping.ColumnMappings.Add("KINGAKU_3", "KINGAKU_3")
            tableMapping.ColumnMappings.Add("CODE_4", "CODE_4")
            tableMapping.ColumnMappings.Add("KINGAKU_4", "KINGAKU_4")
            tableMapping.ColumnMappings.Add("CODE_5", "CODE_5")
            tableMapping.ColumnMappings.Add("KINGAKU_5", "KINGAKU_5")
            tableMapping.ColumnMappings.Add("CODE_6", "CODE_6")
            tableMapping.ColumnMappings.Add("KINGAKU_6", "KINGAKU_6")
            tableMapping.ColumnMappings.Add("CODE_7", "CODE_7")
            tableMapping.ColumnMappings.Add("KINGAKU_7", "KINGAKU_7")
            tableMapping.ColumnMappings.Add("CODE_8", "CODE_8")
            tableMapping.ColumnMappings.Add("KINGAKU_8", "KINGAKU_8")
            tableMapping.ColumnMappings.Add("KIJITUNAISIHARAIBI", "KIJITUNAISIHARAIBI")
            tableMapping.ColumnMappings.Add("TONYANAME", "TONYANAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Model.My.MySettings.Default.DB_FSUISANConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PCNAME, PGID, TONYACODE, GYONO, CODE_1, KINGAKU_1, CODE_2, KINGAKU_2, CODE"& _ 
                "_3, KINGAKU_3, CODE_4, KINGAKU_4, CODE_5, KINGAKU_5, CODE_6, KINGAKU_6, CODE_7, "& _ 
                "KINGAKU_7, CODE_8, KINGAKU_8, KIJITUNAISIHARAIBI, TONYANAME FROM U_FSUISAN.WT_PR"& _ 
                "INTBASE_1 WHERE (PCNAME = @PCNAME) AND (PGID = @PGID) ORDER BY PCNAME, PGID, TON"& _ 
                "YACODE, GYONO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCNAME", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "PCNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PGID", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "PGID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ReportBase.WT_PRINTBASE_1DataTable, ByVal PCNAME As String, ByVal PGID As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PCNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PCNAME,String)
            End If
            If (PGID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PGID")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PGID,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PCNAME As String, ByVal PGID As String) As ReportBase.WT_PRINTBASE_1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PCNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PCNAME,String)
            End If
            If (PGID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PGID")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PGID,String)
            End If
            Dim dataTable As ReportBase.WT_PRINTBASE_1DataTable = New ReportBase.WT_PRINTBASE_1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ReportBase, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ReportBase, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ReportBase, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ReportBase) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な"& _ 
                        " TableAdapter インスタンスに設定してください。")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
