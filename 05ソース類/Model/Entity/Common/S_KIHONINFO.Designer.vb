'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3643
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("S_KIHONINFO"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class S_KIHONINFO
    Inherits Global.System.Data.DataSet
    
    Private tableS_KIHONINFOView As S_KIHONINFOViewDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("S_KIHONINFOView")) Is Nothing) Then
                MyBase.Tables.Add(New S_KIHONINFOViewDataTable(ds.Tables("S_KIHONINFOView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_KIHONINFOView() As S_KIHONINFOViewDataTable
        Get
            Return Me.tableS_KIHONINFOView
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As S_KIHONINFO = CType(MyBase.Clone,S_KIHONINFO)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("S_KIHONINFOView")) Is Nothing) Then
                MyBase.Tables.Add(New S_KIHONINFOViewDataTable(ds.Tables("S_KIHONINFOView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableS_KIHONINFOView = CType(MyBase.Tables("S_KIHONINFOView"),S_KIHONINFOViewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_KIHONINFOView) Is Nothing) Then
                Me.tableS_KIHONINFOView.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "S_KIHONINFO"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/S_KIHONINFO.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableS_KIHONINFOView = New S_KIHONINFOViewDataTable
        MyBase.Tables.Add(Me.tableS_KIHONINFOView)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_KIHONINFOView() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As S_KIHONINFO = New S_KIHONINFO
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub S_KIHONINFOViewRowChangeEventHandler(ByVal sender As Object, ByVal e As S_KIHONINFOViewRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_KIHONINFOViewDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_KIHONINFOViewRow)
        
        Private columnKEYCODE As Global.System.Data.DataColumn
        
        Private columnKIS_MEI As Global.System.Data.DataColumn
        
        Private columnDHS_MEI As Global.System.Data.DataColumn
        
        Private columnZIP_COD As Global.System.Data.DataColumn
        
        Private columnADR As Global.System.Data.DataColumn
        
        Private columnTEL_BNG As Global.System.Data.DataColumn
        
        Private columnFAX_BNG As Global.System.Data.DataColumn
        
        Private columnBNK_MEI As Global.System.Data.DataColumn
        
        Private columnSTN_MEI As Global.System.Data.DataColumn
        
        Private columnYKN_SBT As Global.System.Data.DataColumn
        
        Private columnKUZ_BNG As Global.System.Data.DataColumn
        
        Private columnYKN_MIG As Global.System.Data.DataColumn
        
        Private columnAZK_RAT As Global.System.Data.DataColumn
        
        Private columnHSK_RAT As Global.System.Data.DataColumn
        
        Private columnFIN_UPD_3RD As Global.System.Data.DataColumn
        
        Private columnFIN_UPD_KMT As Global.System.Data.DataColumn
        
        Private columnKISYU_MONTH As Global.System.Data.DataColumn
        
        Private columnSTART_NND As Global.System.Data.DataColumn
        
        Private columnNOW_NND As Global.System.Data.DataColumn
        
        Private columnDATECHECKKBN As Global.System.Data.DataColumn
        
        Private columnDATECHKTUKISUU As Global.System.Data.DataColumn
        
        Private columnKJN_HSK_DEF As Global.System.Data.DataColumn
        
        Private columnKJN_HSK_MLT As Global.System.Data.DataColumn
        
        Private columnHTY_HSK_DEF As Global.System.Data.DataColumn
        
        Private columnHTY_HSK_MLT As Global.System.Data.DataColumn
        
        Private columnUPDATEMENT As Global.System.Data.DataColumn
        
        Private columnUPDATEPGID As Global.System.Data.DataColumn
        
        Private columnUPDATEUSERCODE As Global.System.Data.DataColumn
        
        Private columnCDATE As Global.System.Data.DataColumn
        
        Private columnUDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_KIHONINFOView"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KEYCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEYCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KIS_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKIS_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DHS_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDHS_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZIP_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZIP_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEL_BNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL_BNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAX_BNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX_BNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BNK_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBNK_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STN_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTN_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YKN_SBTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYKN_SBT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KUZ_BNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKUZ_BNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YKN_MIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYKN_MIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AZK_RATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAZK_RAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSK_RATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSK_RAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_UPD_3RDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_UPD_3RD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_UPD_KMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_UPD_KMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KISYU_MONTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKISYU_MONTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_NNDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_NND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOW_NNDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOW_NND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATECHECKKBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATECHECKKBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATECHKTUKISUUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATECHKTUKISUU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KJN_HSK_DEFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKJN_HSK_DEF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KJN_HSK_MLTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKJN_HSK_MLT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HTY_HSK_DEFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHTY_HSK_DEF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HTY_HSK_MLTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHTY_HSK_MLT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEPGIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEPGID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEUSERCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEUSERCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_KIHONINFOViewRow
            Get
                Return CType(Me.Rows(index),S_KIHONINFOViewRow)
            End Get
        End Property
        
        Public Event S_KIHONINFOViewRowChanging As S_KIHONINFOViewRowChangeEventHandler
        
        Public Event S_KIHONINFOViewRowChanged As S_KIHONINFOViewRowChangeEventHandler
        
        Public Event S_KIHONINFOViewRowDeleting As S_KIHONINFOViewRowChangeEventHandler
        
        Public Event S_KIHONINFOViewRowDeleted As S_KIHONINFOViewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_KIHONINFOViewRow(ByVal row As S_KIHONINFOViewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_KIHONINFOViewRow( _
                    ByVal KEYCODE As Decimal,  _
                    ByVal KIS_MEI As String,  _
                    ByVal DHS_MEI As String,  _
                    ByVal ZIP_COD As String,  _
                    ByVal ADR As String,  _
                    ByVal TEL_BNG As String,  _
                    ByVal FAX_BNG As String,  _
                    ByVal BNK_MEI As String,  _
                    ByVal STN_MEI As String,  _
                    ByVal YKN_SBT As String,  _
                    ByVal KUZ_BNG As String,  _
                    ByVal YKN_MIG As String,  _
                    ByVal AZK_RAT As Decimal,  _
                    ByVal HSK_RAT As Decimal,  _
                    ByVal FIN_UPD_3RD As Date,  _
                    ByVal FIN_UPD_KMT As Date,  _
                    ByVal KISYU_MONTH As Decimal,  _
                    ByVal START_NND As Decimal,  _
                    ByVal NOW_NND As Decimal,  _
                    ByVal DATECHECKKBN As Byte,  _
                    ByVal DATECHKTUKISUU As Byte,  _
                    ByVal KJN_HSK_DEF As Decimal,  _
                    ByVal KJN_HSK_MLT As Decimal,  _
                    ByVal HTY_HSK_DEF As Decimal,  _
                    ByVal HTY_HSK_MLT As Decimal,  _
                    ByVal UPDATEMENT As Date,  _
                    ByVal UPDATEPGID As String,  _
                    ByVal UPDATEUSERCODE As String,  _
                    ByVal _CDATE As Date,  _
                    ByVal UDATE As Date) As S_KIHONINFOViewRow
            Dim rowS_KIHONINFOViewRow As S_KIHONINFOViewRow = CType(Me.NewRow,S_KIHONINFOViewRow)
            Dim columnValuesArray() As Object = New Object() {KEYCODE, KIS_MEI, DHS_MEI, ZIP_COD, ADR, TEL_BNG, FAX_BNG, BNK_MEI, STN_MEI, YKN_SBT, KUZ_BNG, YKN_MIG, AZK_RAT, HSK_RAT, FIN_UPD_3RD, FIN_UPD_KMT, KISYU_MONTH, START_NND, NOW_NND, DATECHECKKBN, DATECHKTUKISUU, KJN_HSK_DEF, KJN_HSK_MLT, HTY_HSK_DEF, HTY_HSK_MLT, UPDATEMENT, UPDATEPGID, UPDATEUSERCODE, _CDATE, UDATE}
            rowS_KIHONINFOViewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_KIHONINFOViewRow)
            Return rowS_KIHONINFOViewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKEYCODE(ByVal KEYCODE As Decimal) As S_KIHONINFOViewRow
            Return CType(Me.Rows.Find(New Object() {KEYCODE}),S_KIHONINFOViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_KIHONINFOViewDataTable = CType(MyBase.Clone,S_KIHONINFOViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_KIHONINFOViewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKEYCODE = MyBase.Columns("KEYCODE")
            Me.columnKIS_MEI = MyBase.Columns("KIS_MEI")
            Me.columnDHS_MEI = MyBase.Columns("DHS_MEI")
            Me.columnZIP_COD = MyBase.Columns("ZIP_COD")
            Me.columnADR = MyBase.Columns("ADR")
            Me.columnTEL_BNG = MyBase.Columns("TEL_BNG")
            Me.columnFAX_BNG = MyBase.Columns("FAX_BNG")
            Me.columnBNK_MEI = MyBase.Columns("BNK_MEI")
            Me.columnSTN_MEI = MyBase.Columns("STN_MEI")
            Me.columnYKN_SBT = MyBase.Columns("YKN_SBT")
            Me.columnKUZ_BNG = MyBase.Columns("KUZ_BNG")
            Me.columnYKN_MIG = MyBase.Columns("YKN_MIG")
            Me.columnAZK_RAT = MyBase.Columns("AZK_RAT")
            Me.columnHSK_RAT = MyBase.Columns("HSK_RAT")
            Me.columnFIN_UPD_3RD = MyBase.Columns("FIN_UPD_3RD")
            Me.columnFIN_UPD_KMT = MyBase.Columns("FIN_UPD_KMT")
            Me.columnKISYU_MONTH = MyBase.Columns("KISYU_MONTH")
            Me.columnSTART_NND = MyBase.Columns("START_NND")
            Me.columnNOW_NND = MyBase.Columns("NOW_NND")
            Me.columnDATECHECKKBN = MyBase.Columns("DATECHECKKBN")
            Me.columnDATECHKTUKISUU = MyBase.Columns("DATECHKTUKISUU")
            Me.columnKJN_HSK_DEF = MyBase.Columns("KJN_HSK_DEF")
            Me.columnKJN_HSK_MLT = MyBase.Columns("KJN_HSK_MLT")
            Me.columnHTY_HSK_DEF = MyBase.Columns("HTY_HSK_DEF")
            Me.columnHTY_HSK_MLT = MyBase.Columns("HTY_HSK_MLT")
            Me.columnUPDATEMENT = MyBase.Columns("UPDATEMENT")
            Me.columnUPDATEPGID = MyBase.Columns("UPDATEPGID")
            Me.columnUPDATEUSERCODE = MyBase.Columns("UPDATEUSERCODE")
            Me.columnCDATE = MyBase.Columns("CDATE")
            Me.columnUDATE = MyBase.Columns("UDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKEYCODE = New Global.System.Data.DataColumn("KEYCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEYCODE)
            Me.columnKIS_MEI = New Global.System.Data.DataColumn("KIS_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKIS_MEI)
            Me.columnDHS_MEI = New Global.System.Data.DataColumn("DHS_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDHS_MEI)
            Me.columnZIP_COD = New Global.System.Data.DataColumn("ZIP_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP_COD)
            Me.columnADR = New Global.System.Data.DataColumn("ADR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADR)
            Me.columnTEL_BNG = New Global.System.Data.DataColumn("TEL_BNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL_BNG)
            Me.columnFAX_BNG = New Global.System.Data.DataColumn("FAX_BNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX_BNG)
            Me.columnBNK_MEI = New Global.System.Data.DataColumn("BNK_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBNK_MEI)
            Me.columnSTN_MEI = New Global.System.Data.DataColumn("STN_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTN_MEI)
            Me.columnYKN_SBT = New Global.System.Data.DataColumn("YKN_SBT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYKN_SBT)
            Me.columnKUZ_BNG = New Global.System.Data.DataColumn("KUZ_BNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKUZ_BNG)
            Me.columnYKN_MIG = New Global.System.Data.DataColumn("YKN_MIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYKN_MIG)
            Me.columnAZK_RAT = New Global.System.Data.DataColumn("AZK_RAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAZK_RAT)
            Me.columnHSK_RAT = New Global.System.Data.DataColumn("HSK_RAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSK_RAT)
            Me.columnFIN_UPD_3RD = New Global.System.Data.DataColumn("FIN_UPD_3RD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_UPD_3RD)
            Me.columnFIN_UPD_KMT = New Global.System.Data.DataColumn("FIN_UPD_KMT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_UPD_KMT)
            Me.columnKISYU_MONTH = New Global.System.Data.DataColumn("KISYU_MONTH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKISYU_MONTH)
            Me.columnSTART_NND = New Global.System.Data.DataColumn("START_NND", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_NND)
            Me.columnNOW_NND = New Global.System.Data.DataColumn("NOW_NND", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOW_NND)
            Me.columnDATECHECKKBN = New Global.System.Data.DataColumn("DATECHECKKBN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATECHECKKBN)
            Me.columnDATECHKTUKISUU = New Global.System.Data.DataColumn("DATECHKTUKISUU", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATECHKTUKISUU)
            Me.columnKJN_HSK_DEF = New Global.System.Data.DataColumn("KJN_HSK_DEF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKJN_HSK_DEF)
            Me.columnKJN_HSK_MLT = New Global.System.Data.DataColumn("KJN_HSK_MLT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKJN_HSK_MLT)
            Me.columnHTY_HSK_DEF = New Global.System.Data.DataColumn("HTY_HSK_DEF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHTY_HSK_DEF)
            Me.columnHTY_HSK_MLT = New Global.System.Data.DataColumn("HTY_HSK_MLT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHTY_HSK_MLT)
            Me.columnUPDATEMENT = New Global.System.Data.DataColumn("UPDATEMENT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEMENT)
            Me.columnUPDATEPGID = New Global.System.Data.DataColumn("UPDATEPGID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEPGID)
            Me.columnUPDATEUSERCODE = New Global.System.Data.DataColumn("UPDATEUSERCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEUSERCODE)
            Me.columnCDATE = New Global.System.Data.DataColumn("CDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnCDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CDATEColumn")
            Me.columnCDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCDATE")
            Me.columnCDATE.ExtendedProperties.Add("Generator_UserColumnName", "CDATE")
            MyBase.Columns.Add(Me.columnCDATE)
            Me.columnUDATE = New Global.System.Data.DataColumn("UDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUDATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKEYCODE}, true))
            Me.columnKEYCODE.AllowDBNull = false
            Me.columnKEYCODE.Unique = true
            Me.columnKIS_MEI.MaxLength = 30
            Me.columnDHS_MEI.MaxLength = 20
            Me.columnZIP_COD.MaxLength = 10
            Me.columnADR.MaxLength = 30
            Me.columnTEL_BNG.MaxLength = 15
            Me.columnFAX_BNG.MaxLength = 15
            Me.columnBNK_MEI.MaxLength = 20
            Me.columnSTN_MEI.MaxLength = 20
            Me.columnYKN_SBT.MaxLength = 4
            Me.columnKUZ_BNG.MaxLength = 20
            Me.columnYKN_MIG.MaxLength = 20
            Me.columnAZK_RAT.AllowDBNull = false
            Me.columnHSK_RAT.AllowDBNull = false
            Me.columnKISYU_MONTH.AllowDBNull = false
            Me.columnSTART_NND.AllowDBNull = false
            Me.columnNOW_NND.AllowDBNull = false
            Me.columnDATECHECKKBN.AllowDBNull = false
            Me.columnDATECHKTUKISUU.AllowDBNull = false
            Me.columnKJN_HSK_DEF.AllowDBNull = false
            Me.columnKJN_HSK_MLT.AllowDBNull = false
            Me.columnHTY_HSK_DEF.AllowDBNull = false
            Me.columnHTY_HSK_MLT.AllowDBNull = false
            Me.columnUPDATEMENT.AllowDBNull = false
            Me.columnUPDATEPGID.AllowDBNull = false
            Me.columnUPDATEPGID.MaxLength = 20
            Me.columnUPDATEUSERCODE.AllowDBNull = false
            Me.columnUPDATEUSERCODE.MaxLength = 15
            Me.columnCDATE.AllowDBNull = false
            Me.columnUDATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_KIHONINFOViewRow() As S_KIHONINFOViewRow
            Return CType(Me.NewRow,S_KIHONINFOViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_KIHONINFOViewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_KIHONINFOViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_KIHONINFOViewRowChangedEvent) Is Nothing) Then
                RaiseEvent S_KIHONINFOViewRowChanged(Me, New S_KIHONINFOViewRowChangeEvent(CType(e.Row,S_KIHONINFOViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_KIHONINFOViewRowChangingEvent) Is Nothing) Then
                RaiseEvent S_KIHONINFOViewRowChanging(Me, New S_KIHONINFOViewRowChangeEvent(CType(e.Row,S_KIHONINFOViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_KIHONINFOViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_KIHONINFOViewRowDeleted(Me, New S_KIHONINFOViewRowChangeEvent(CType(e.Row,S_KIHONINFOViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_KIHONINFOViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_KIHONINFOViewRowDeleting(Me, New S_KIHONINFOViewRowChangeEvent(CType(e.Row,S_KIHONINFOViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_KIHONINFOViewRow(ByVal row As S_KIHONINFOViewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As S_KIHONINFO = New S_KIHONINFO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_KIHONINFOViewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_KIHONINFOViewRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_KIHONINFOView As S_KIHONINFOViewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_KIHONINFOView = CType(Me.Table,S_KIHONINFOViewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KEYCODE() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.KEYCODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KEYCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KIS_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.KIS_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'KIS_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KIS_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DHS_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.DHS_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'DHS_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.DHS_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZIP_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.ZIP_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'ZIP_COD' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.ZIP_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADR() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.ADRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'ADR' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.ADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEL_BNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.TEL_BNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'TEL_BNG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.TEL_BNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAX_BNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.FAX_BNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'FAX_BNG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.FAX_BNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BNK_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.BNK_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'BNK_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.BNK_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STN_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.STN_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'STN_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.STN_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YKN_SBT() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.YKN_SBTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'YKN_SBT' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.YKN_SBTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KUZ_BNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.KUZ_BNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'KUZ_BNG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KUZ_BNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YKN_MIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.YKN_MIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'YKN_MIG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.YKN_MIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AZK_RAT() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.AZK_RATColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.AZK_RATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSK_RAT() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.HSK_RATColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.HSK_RATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_UPD_3RD() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.FIN_UPD_3RDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'FIN_UPD_3RD' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.FIN_UPD_3RDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_UPD_KMT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_KIHONINFOView.FIN_UPD_KMTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'S_KIHONINFOView' にある列 'FIN_UPD_KMT' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.FIN_UPD_KMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KISYU_MONTH() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.KISYU_MONTHColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KISYU_MONTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_NND() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.START_NNDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.START_NNDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOW_NND() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.NOW_NNDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.NOW_NNDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATECHECKKBN() As Byte
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.DATECHECKKBNColumn),Byte)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.DATECHECKKBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATECHKTUKISUU() As Byte
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.DATECHKTUKISUUColumn),Byte)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.DATECHKTUKISUUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KJN_HSK_DEF() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.KJN_HSK_DEFColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KJN_HSK_DEFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KJN_HSK_MLT() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.KJN_HSK_MLTColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.KJN_HSK_MLTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HTY_HSK_DEF() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.HTY_HSK_DEFColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.HTY_HSK_DEFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HTY_HSK_MLT() As Decimal
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.HTY_HSK_MLTColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.HTY_HSK_MLTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEMENT() As Date
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.UPDATEMENTColumn),Date)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.UPDATEMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEPGID() As String
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.UPDATEPGIDColumn),String)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.UPDATEPGIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEUSERCODE() As String
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.UPDATEUSERCODEColumn),String)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.UPDATEUSERCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _CDATE() As Date
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.CDATEColumn),Date)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.CDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UDATE() As Date
            Get
                Return CType(Me(Me.tableS_KIHONINFOView.UDATEColumn),Date)
            End Get
            Set
                Me(Me.tableS_KIHONINFOView.UDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKIS_MEINull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.KIS_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKIS_MEINull()
            Me(Me.tableS_KIHONINFOView.KIS_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDHS_MEINull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.DHS_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDHS_MEINull()
            Me(Me.tableS_KIHONINFOView.DHS_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZIP_CODNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.ZIP_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZIP_CODNull()
            Me(Me.tableS_KIHONINFOView.ZIP_CODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADRNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.ADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADRNull()
            Me(Me.tableS_KIHONINFOView.ADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEL_BNGNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.TEL_BNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEL_BNGNull()
            Me(Me.tableS_KIHONINFOView.TEL_BNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAX_BNGNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.FAX_BNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAX_BNGNull()
            Me(Me.tableS_KIHONINFOView.FAX_BNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBNK_MEINull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.BNK_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBNK_MEINull()
            Me(Me.tableS_KIHONINFOView.BNK_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTN_MEINull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.STN_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTN_MEINull()
            Me(Me.tableS_KIHONINFOView.STN_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYKN_SBTNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.YKN_SBTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYKN_SBTNull()
            Me(Me.tableS_KIHONINFOView.YKN_SBTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKUZ_BNGNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.KUZ_BNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKUZ_BNGNull()
            Me(Me.tableS_KIHONINFOView.KUZ_BNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYKN_MIGNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.YKN_MIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYKN_MIGNull()
            Me(Me.tableS_KIHONINFOView.YKN_MIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_UPD_3RDNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.FIN_UPD_3RDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_UPD_3RDNull()
            Me(Me.tableS_KIHONINFOView.FIN_UPD_3RDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_UPD_KMTNull() As Boolean
            Return Me.IsNull(Me.tableS_KIHONINFOView.FIN_UPD_KMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_UPD_KMTNull()
            Me(Me.tableS_KIHONINFOView.FIN_UPD_KMTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_KIHONINFOViewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_KIHONINFOViewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_KIHONINFOViewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_KIHONINFOViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace S_KIHONINFOTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_KIHONINFOViewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_KIHONINFOView"
            tableMapping.ColumnMappings.Add("KEYCODE", "KEYCODE")
            tableMapping.ColumnMappings.Add("KIS_MEI", "KIS_MEI")
            tableMapping.ColumnMappings.Add("DHS_MEI", "DHS_MEI")
            tableMapping.ColumnMappings.Add("ZIP_COD", "ZIP_COD")
            tableMapping.ColumnMappings.Add("ADR", "ADR")
            tableMapping.ColumnMappings.Add("TEL_BNG", "TEL_BNG")
            tableMapping.ColumnMappings.Add("FAX_BNG", "FAX_BNG")
            tableMapping.ColumnMappings.Add("BNK_MEI", "BNK_MEI")
            tableMapping.ColumnMappings.Add("STN_MEI", "STN_MEI")
            tableMapping.ColumnMappings.Add("YKN_SBT", "YKN_SBT")
            tableMapping.ColumnMappings.Add("KUZ_BNG", "KUZ_BNG")
            tableMapping.ColumnMappings.Add("YKN_MIG", "YKN_MIG")
            tableMapping.ColumnMappings.Add("AZK_RAT", "AZK_RAT")
            tableMapping.ColumnMappings.Add("HSK_RAT", "HSK_RAT")
            tableMapping.ColumnMappings.Add("FIN_UPD_3RD", "FIN_UPD_3RD")
            tableMapping.ColumnMappings.Add("FIN_UPD_KMT", "FIN_UPD_KMT")
            tableMapping.ColumnMappings.Add("KISYU_MONTH", "KISYU_MONTH")
            tableMapping.ColumnMappings.Add("START_NND", "START_NND")
            tableMapping.ColumnMappings.Add("NOW_NND", "NOW_NND")
            tableMapping.ColumnMappings.Add("DATECHECKKBN", "DATECHECKKBN")
            tableMapping.ColumnMappings.Add("DATECHKTUKISUU", "DATECHKTUKISUU")
            tableMapping.ColumnMappings.Add("KJN_HSK_DEF", "KJN_HSK_DEF")
            tableMapping.ColumnMappings.Add("KJN_HSK_MLT", "KJN_HSK_MLT")
            tableMapping.ColumnMappings.Add("HTY_HSK_DEF", "HTY_HSK_DEF")
            tableMapping.ColumnMappings.Add("HTY_HSK_MLT", "HTY_HSK_MLT")
            tableMapping.ColumnMappings.Add("UPDATEMENT", "UPDATEMENT")
            tableMapping.ColumnMappings.Add("UPDATEPGID", "UPDATEPGID")
            tableMapping.ColumnMappings.Add("UPDATEUSERCODE", "UPDATEUSERCODE")
            tableMapping.ColumnMappings.Add("CDATE", "CDATE")
            tableMapping.ColumnMappings.Add("UDATE", "UDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Model.My.MySettings.Default.DB_FSUISANConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from S_KIHONINFO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As S_KIHONINFO.S_KIHONINFOViewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As S_KIHONINFO.S_KIHONINFOViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As S_KIHONINFO.S_KIHONINFOViewDataTable = New S_KIHONINFO.S_KIHONINFOViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As S_KIHONINFO, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As S_KIHONINFO, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As S_KIHONINFO, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As S_KIHONINFO) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な"& _ 
                        " TableAdapter インスタンスに設定してください。")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
