'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3643
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("M_KUMIAIIN"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class M_KUMIAIIN
    Inherits Global.System.Data.DataSet
    
    Private tableM_KUMIAIINView As M_KUMIAIINViewDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("M_KUMIAIINView")) Is Nothing) Then
                MyBase.Tables.Add(New M_KUMIAIINViewDataTable(ds.Tables("M_KUMIAIINView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property M_KUMIAIINView() As M_KUMIAIINViewDataTable
        Get
            Return Me.tableM_KUMIAIINView
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As M_KUMIAIIN = CType(MyBase.Clone,M_KUMIAIIN)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("M_KUMIAIINView")) Is Nothing) Then
                MyBase.Tables.Add(New M_KUMIAIINViewDataTable(ds.Tables("M_KUMIAIINView")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableM_KUMIAIINView = CType(MyBase.Tables("M_KUMIAIINView"),M_KUMIAIINViewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableM_KUMIAIINView) Is Nothing) Then
                Me.tableM_KUMIAIINView.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "M_KUMIAIIN"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/M_KUMIAIIN.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableM_KUMIAIINView = New M_KUMIAIINViewDataTable
        MyBase.Tables.Add(Me.tableM_KUMIAIINView)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeM_KUMIAIINView() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As M_KUMIAIIN = New M_KUMIAIIN
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub M_KUMIAIINViewRowChangeEventHandler(ByVal sender As Object, ByVal e As M_KUMIAIINViewRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class M_KUMIAIINViewDataTable
        Inherits Global.System.Data.TypedTableBase(Of M_KUMIAIINViewRow)
        
        Private columnKUMIAIINCODE As Global.System.Data.DataColumn
        
        Private columnYOM_KNA As Global.System.Data.DataColumn
        
        Private columnKUM_MEI As Global.System.Data.DataColumn
        
        Private columnDHS_MEI As Global.System.Data.DataColumn
        
        Private columnZIP_COD As Global.System.Data.DataColumn
        
        Private columnADR1 As Global.System.Data.DataColumn
        
        Private columnADR2 As Global.System.Data.DataColumn
        
        Private columnTEL_BNG As Global.System.Data.DataColumn
        
        Private columnFAX_BNG As Global.System.Data.DataColumn
        
        Private columnSDI_TIK As Global.System.Data.DataColumn
        
        Private columnTNP_KBN As Global.System.Data.DataColumn
        
        Private columnSSY_KBN As Global.System.Data.DataColumn
        
        Private columnHJN_KBN As Global.System.Data.DataColumn
        
        Private columnHSY_NIN As Global.System.Data.DataColumn
        
        Private columnHSY_KKN As Global.System.Data.DataColumn
        
        Private columnSEC_KUM_MEI As Global.System.Data.DataColumn
        
        Private columnSEC_ZIP_COD As Global.System.Data.DataColumn
        
        Private columnSEC_ADR1 As Global.System.Data.DataColumn
        
        Private columnSEC_ADR2 As Global.System.Data.DataColumn
        
        Private columnSEC_TEL As Global.System.Data.DataColumn
        
        Private columnSEC_FAX As Global.System.Data.DataColumn
        
        Private columnSEC_TNP As Global.System.Data.DataColumn
        
        Private columnSEI_KUM_MEI As Global.System.Data.DataColumn
        
        Private columnSEI_ZIP_COD As Global.System.Data.DataColumn
        
        Private columnSEI_ADR1 As Global.System.Data.DataColumn
        
        Private columnSEI_ADR2 As Global.System.Data.DataColumn
        
        Private columnSEI_TEL As Global.System.Data.DataColumn
        
        Private columnSEI_FAX As Global.System.Data.DataColumn
        
        Private columnZNN_SIR As Global.System.Data.DataColumn
        
        Private columnHSK_KJN As Global.System.Data.DataColumn
        
        Private columnGND_KGK As Global.System.Data.DataColumn
        
        Private columnKJN_HSK As Global.System.Data.DataColumn
        
        Private columnHTY_HSK As Global.System.Data.DataColumn
        
        Private columnDTI_YTI_DAY As Global.System.Data.DataColumn
        
        Private columnUPDATEMENT As Global.System.Data.DataColumn
        
        Private columnUPDATEPGID As Global.System.Data.DataColumn
        
        Private columnUPDATEUSERCODE As Global.System.Data.DataColumn
        
        Private columnCDATE As Global.System.Data.DataColumn
        
        Private columnUDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "M_KUMIAIINView"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KUMIAIINCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKUMIAIINCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YOM_KNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYOM_KNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KUM_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKUM_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DHS_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDHS_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZIP_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZIP_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEL_BNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL_BNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAX_BNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX_BNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDI_TIKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDI_TIK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNP_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNP_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSY_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSY_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HJN_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHJN_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSY_NINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSY_NIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSY_KKNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSY_KKN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_KUM_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_KUM_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_ZIP_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_ZIP_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_ADR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_ADR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_ADR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_ADR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEC_TNPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEC_TNP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_KUM_MEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_KUM_MEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_ZIP_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_ZIP_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_ADR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_ADR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_ADR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_ADR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEI_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEI_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZNN_SIRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZNN_SIR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSK_KJNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSK_KJN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GND_KGKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGND_KGK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KJN_HSKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKJN_HSK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HTY_HSKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHTY_HSK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DTI_YTI_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDTI_YTI_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEPGIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEPGID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPDATEUSERCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATEUSERCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As M_KUMIAIINViewRow
            Get
                Return CType(Me.Rows(index),M_KUMIAIINViewRow)
            End Get
        End Property
        
        Public Event M_KUMIAIINViewRowChanging As M_KUMIAIINViewRowChangeEventHandler
        
        Public Event M_KUMIAIINViewRowChanged As M_KUMIAIINViewRowChangeEventHandler
        
        Public Event M_KUMIAIINViewRowDeleting As M_KUMIAIINViewRowChangeEventHandler
        
        Public Event M_KUMIAIINViewRowDeleted As M_KUMIAIINViewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddM_KUMIAIINViewRow(ByVal row As M_KUMIAIINViewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddM_KUMIAIINViewRow( _
                    ByVal KUMIAIINCODE As String,  _
                    ByVal YOM_KNA As String,  _
                    ByVal KUM_MEI As String,  _
                    ByVal DHS_MEI As String,  _
                    ByVal ZIP_COD As String,  _
                    ByVal ADR1 As String,  _
                    ByVal ADR2 As String,  _
                    ByVal TEL_BNG As String,  _
                    ByVal FAX_BNG As String,  _
                    ByVal SDI_TIK As Byte,  _
                    ByVal TNP_KBN As Byte,  _
                    ByVal SSY_KBN As Byte,  _
                    ByVal HJN_KBN As Byte,  _
                    ByVal HSY_NIN As Byte,  _
                    ByVal HSY_KKN As Date,  _
                    ByVal SEC_KUM_MEI As String,  _
                    ByVal SEC_ZIP_COD As String,  _
                    ByVal SEC_ADR1 As String,  _
                    ByVal SEC_ADR2 As String,  _
                    ByVal SEC_TEL As String,  _
                    ByVal SEC_FAX As String,  _
                    ByVal SEC_TNP As String,  _
                    ByVal SEI_KUM_MEI As String,  _
                    ByVal SEI_ZIP_COD As String,  _
                    ByVal SEI_ADR1 As String,  _
                    ByVal SEI_ADR2 As String,  _
                    ByVal SEI_TEL As String,  _
                    ByVal SEI_FAX As String,  _
                    ByVal ZNN_SIR As Decimal,  _
                    ByVal HSK_KJN As Decimal,  _
                    ByVal GND_KGK As Decimal,  _
                    ByVal KJN_HSK As Decimal,  _
                    ByVal HTY_HSK As Decimal,  _
                    ByVal DTI_YTI_DAY As Date,  _
                    ByVal UPDATEMENT As Date,  _
                    ByVal UPDATEPGID As String,  _
                    ByVal UPDATEUSERCODE As String,  _
                    ByVal _CDATE As Date,  _
                    ByVal UDATE As Date) As M_KUMIAIINViewRow
            Dim rowM_KUMIAIINViewRow As M_KUMIAIINViewRow = CType(Me.NewRow,M_KUMIAIINViewRow)
            Dim columnValuesArray() As Object = New Object() {KUMIAIINCODE, YOM_KNA, KUM_MEI, DHS_MEI, ZIP_COD, ADR1, ADR2, TEL_BNG, FAX_BNG, SDI_TIK, TNP_KBN, SSY_KBN, HJN_KBN, HSY_NIN, HSY_KKN, SEC_KUM_MEI, SEC_ZIP_COD, SEC_ADR1, SEC_ADR2, SEC_TEL, SEC_FAX, SEC_TNP, SEI_KUM_MEI, SEI_ZIP_COD, SEI_ADR1, SEI_ADR2, SEI_TEL, SEI_FAX, ZNN_SIR, HSK_KJN, GND_KGK, KJN_HSK, HTY_HSK, DTI_YTI_DAY, UPDATEMENT, UPDATEPGID, UPDATEUSERCODE, _CDATE, UDATE}
            rowM_KUMIAIINViewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowM_KUMIAIINViewRow)
            Return rowM_KUMIAIINViewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByKUMIAIINCODE(ByVal KUMIAIINCODE As String) As M_KUMIAIINViewRow
            Return CType(Me.Rows.Find(New Object() {KUMIAIINCODE}),M_KUMIAIINViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As M_KUMIAIINViewDataTable = CType(MyBase.Clone,M_KUMIAIINViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New M_KUMIAIINViewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKUMIAIINCODE = MyBase.Columns("KUMIAIINCODE")
            Me.columnYOM_KNA = MyBase.Columns("YOM_KNA")
            Me.columnKUM_MEI = MyBase.Columns("KUM_MEI")
            Me.columnDHS_MEI = MyBase.Columns("DHS_MEI")
            Me.columnZIP_COD = MyBase.Columns("ZIP_COD")
            Me.columnADR1 = MyBase.Columns("ADR1")
            Me.columnADR2 = MyBase.Columns("ADR2")
            Me.columnTEL_BNG = MyBase.Columns("TEL_BNG")
            Me.columnFAX_BNG = MyBase.Columns("FAX_BNG")
            Me.columnSDI_TIK = MyBase.Columns("SDI_TIK")
            Me.columnTNP_KBN = MyBase.Columns("TNP_KBN")
            Me.columnSSY_KBN = MyBase.Columns("SSY_KBN")
            Me.columnHJN_KBN = MyBase.Columns("HJN_KBN")
            Me.columnHSY_NIN = MyBase.Columns("HSY_NIN")
            Me.columnHSY_KKN = MyBase.Columns("HSY_KKN")
            Me.columnSEC_KUM_MEI = MyBase.Columns("SEC_KUM_MEI")
            Me.columnSEC_ZIP_COD = MyBase.Columns("SEC_ZIP_COD")
            Me.columnSEC_ADR1 = MyBase.Columns("SEC_ADR1")
            Me.columnSEC_ADR2 = MyBase.Columns("SEC_ADR2")
            Me.columnSEC_TEL = MyBase.Columns("SEC_TEL")
            Me.columnSEC_FAX = MyBase.Columns("SEC_FAX")
            Me.columnSEC_TNP = MyBase.Columns("SEC_TNP")
            Me.columnSEI_KUM_MEI = MyBase.Columns("SEI_KUM_MEI")
            Me.columnSEI_ZIP_COD = MyBase.Columns("SEI_ZIP_COD")
            Me.columnSEI_ADR1 = MyBase.Columns("SEI_ADR1")
            Me.columnSEI_ADR2 = MyBase.Columns("SEI_ADR2")
            Me.columnSEI_TEL = MyBase.Columns("SEI_TEL")
            Me.columnSEI_FAX = MyBase.Columns("SEI_FAX")
            Me.columnZNN_SIR = MyBase.Columns("ZNN_SIR")
            Me.columnHSK_KJN = MyBase.Columns("HSK_KJN")
            Me.columnGND_KGK = MyBase.Columns("GND_KGK")
            Me.columnKJN_HSK = MyBase.Columns("KJN_HSK")
            Me.columnHTY_HSK = MyBase.Columns("HTY_HSK")
            Me.columnDTI_YTI_DAY = MyBase.Columns("DTI_YTI_DAY")
            Me.columnUPDATEMENT = MyBase.Columns("UPDATEMENT")
            Me.columnUPDATEPGID = MyBase.Columns("UPDATEPGID")
            Me.columnUPDATEUSERCODE = MyBase.Columns("UPDATEUSERCODE")
            Me.columnCDATE = MyBase.Columns("CDATE")
            Me.columnUDATE = MyBase.Columns("UDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKUMIAIINCODE = New Global.System.Data.DataColumn("KUMIAIINCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKUMIAIINCODE)
            Me.columnYOM_KNA = New Global.System.Data.DataColumn("YOM_KNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYOM_KNA)
            Me.columnKUM_MEI = New Global.System.Data.DataColumn("KUM_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKUM_MEI)
            Me.columnDHS_MEI = New Global.System.Data.DataColumn("DHS_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDHS_MEI)
            Me.columnZIP_COD = New Global.System.Data.DataColumn("ZIP_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP_COD)
            Me.columnADR1 = New Global.System.Data.DataColumn("ADR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADR1)
            Me.columnADR2 = New Global.System.Data.DataColumn("ADR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADR2)
            Me.columnTEL_BNG = New Global.System.Data.DataColumn("TEL_BNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL_BNG)
            Me.columnFAX_BNG = New Global.System.Data.DataColumn("FAX_BNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX_BNG)
            Me.columnSDI_TIK = New Global.System.Data.DataColumn("SDI_TIK", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDI_TIK)
            Me.columnTNP_KBN = New Global.System.Data.DataColumn("TNP_KBN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNP_KBN)
            Me.columnSSY_KBN = New Global.System.Data.DataColumn("SSY_KBN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSY_KBN)
            Me.columnHJN_KBN = New Global.System.Data.DataColumn("HJN_KBN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHJN_KBN)
            Me.columnHSY_NIN = New Global.System.Data.DataColumn("HSY_NIN", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSY_NIN)
            Me.columnHSY_KKN = New Global.System.Data.DataColumn("HSY_KKN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSY_KKN)
            Me.columnSEC_KUM_MEI = New Global.System.Data.DataColumn("SEC_KUM_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_KUM_MEI)
            Me.columnSEC_ZIP_COD = New Global.System.Data.DataColumn("SEC_ZIP_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_ZIP_COD)
            Me.columnSEC_ADR1 = New Global.System.Data.DataColumn("SEC_ADR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_ADR1)
            Me.columnSEC_ADR2 = New Global.System.Data.DataColumn("SEC_ADR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_ADR2)
            Me.columnSEC_TEL = New Global.System.Data.DataColumn("SEC_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_TEL)
            Me.columnSEC_FAX = New Global.System.Data.DataColumn("SEC_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_FAX)
            Me.columnSEC_TNP = New Global.System.Data.DataColumn("SEC_TNP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEC_TNP)
            Me.columnSEI_KUM_MEI = New Global.System.Data.DataColumn("SEI_KUM_MEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_KUM_MEI)
            Me.columnSEI_ZIP_COD = New Global.System.Data.DataColumn("SEI_ZIP_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_ZIP_COD)
            Me.columnSEI_ADR1 = New Global.System.Data.DataColumn("SEI_ADR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_ADR1)
            Me.columnSEI_ADR2 = New Global.System.Data.DataColumn("SEI_ADR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_ADR2)
            Me.columnSEI_TEL = New Global.System.Data.DataColumn("SEI_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_TEL)
            Me.columnSEI_FAX = New Global.System.Data.DataColumn("SEI_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEI_FAX)
            Me.columnZNN_SIR = New Global.System.Data.DataColumn("ZNN_SIR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZNN_SIR)
            Me.columnHSK_KJN = New Global.System.Data.DataColumn("HSK_KJN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSK_KJN)
            Me.columnGND_KGK = New Global.System.Data.DataColumn("GND_KGK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGND_KGK)
            Me.columnKJN_HSK = New Global.System.Data.DataColumn("KJN_HSK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKJN_HSK)
            Me.columnHTY_HSK = New Global.System.Data.DataColumn("HTY_HSK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHTY_HSK)
            Me.columnDTI_YTI_DAY = New Global.System.Data.DataColumn("DTI_YTI_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDTI_YTI_DAY)
            Me.columnUPDATEMENT = New Global.System.Data.DataColumn("UPDATEMENT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEMENT)
            Me.columnUPDATEPGID = New Global.System.Data.DataColumn("UPDATEPGID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEPGID)
            Me.columnUPDATEUSERCODE = New Global.System.Data.DataColumn("UPDATEUSERCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATEUSERCODE)
            Me.columnCDATE = New Global.System.Data.DataColumn("CDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnCDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CDATEColumn")
            Me.columnCDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCDATE")
            Me.columnCDATE.ExtendedProperties.Add("Generator_UserColumnName", "CDATE")
            MyBase.Columns.Add(Me.columnCDATE)
            Me.columnUDATE = New Global.System.Data.DataColumn("UDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUDATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnKUMIAIINCODE}, true))
            Me.columnKUMIAIINCODE.AllowDBNull = false
            Me.columnKUMIAIINCODE.Unique = true
            Me.columnKUMIAIINCODE.MaxLength = 4
            Me.columnYOM_KNA.MaxLength = 40
            Me.columnKUM_MEI.MaxLength = 30
            Me.columnDHS_MEI.MaxLength = 30
            Me.columnZIP_COD.MaxLength = 10
            Me.columnADR1.MaxLength = 40
            Me.columnADR2.MaxLength = 40
            Me.columnTEL_BNG.MaxLength = 15
            Me.columnFAX_BNG.MaxLength = 15
            Me.columnSDI_TIK.AllowDBNull = false
            Me.columnTNP_KBN.AllowDBNull = false
            Me.columnSSY_KBN.AllowDBNull = false
            Me.columnHJN_KBN.AllowDBNull = false
            Me.columnHSY_NIN.AllowDBNull = false
            Me.columnSEC_KUM_MEI.MaxLength = 24
            Me.columnSEC_ZIP_COD.MaxLength = 10
            Me.columnSEC_ADR1.MaxLength = 40
            Me.columnSEC_ADR2.MaxLength = 40
            Me.columnSEC_TEL.MaxLength = 15
            Me.columnSEC_FAX.MaxLength = 15
            Me.columnSEC_TNP.MaxLength = 40
            Me.columnSEI_KUM_MEI.MaxLength = 24
            Me.columnSEI_ZIP_COD.MaxLength = 10
            Me.columnSEI_ADR1.MaxLength = 40
            Me.columnSEI_ADR2.MaxLength = 40
            Me.columnSEI_TEL.MaxLength = 15
            Me.columnSEI_FAX.MaxLength = 15
            Me.columnZNN_SIR.AllowDBNull = false
            Me.columnHSK_KJN.AllowDBNull = false
            Me.columnGND_KGK.AllowDBNull = false
            Me.columnKJN_HSK.AllowDBNull = false
            Me.columnHTY_HSK.AllowDBNull = false
            Me.columnUPDATEMENT.AllowDBNull = false
            Me.columnUPDATEPGID.AllowDBNull = false
            Me.columnUPDATEPGID.MaxLength = 20
            Me.columnUPDATEUSERCODE.AllowDBNull = false
            Me.columnUPDATEUSERCODE.MaxLength = 15
            Me.columnCDATE.AllowDBNull = false
            Me.columnUDATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewM_KUMIAIINViewRow() As M_KUMIAIINViewRow
            Return CType(Me.NewRow,M_KUMIAIINViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New M_KUMIAIINViewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(M_KUMIAIINViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.M_KUMIAIINViewRowChangedEvent) Is Nothing) Then
                RaiseEvent M_KUMIAIINViewRowChanged(Me, New M_KUMIAIINViewRowChangeEvent(CType(e.Row,M_KUMIAIINViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.M_KUMIAIINViewRowChangingEvent) Is Nothing) Then
                RaiseEvent M_KUMIAIINViewRowChanging(Me, New M_KUMIAIINViewRowChangeEvent(CType(e.Row,M_KUMIAIINViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.M_KUMIAIINViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent M_KUMIAIINViewRowDeleted(Me, New M_KUMIAIINViewRowChangeEvent(CType(e.Row,M_KUMIAIINViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.M_KUMIAIINViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent M_KUMIAIINViewRowDeleting(Me, New M_KUMIAIINViewRowChangeEvent(CType(e.Row,M_KUMIAIINViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveM_KUMIAIINViewRow(ByVal row As M_KUMIAIINViewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As M_KUMIAIIN = New M_KUMIAIIN
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "M_KUMIAIINViewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class M_KUMIAIINViewRow
        Inherits Global.System.Data.DataRow
        
        Private tableM_KUMIAIINView As M_KUMIAIINViewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableM_KUMIAIINView = CType(Me.Table,M_KUMIAIINViewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KUMIAIINCODE() As String
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.KUMIAIINCODEColumn),String)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.KUMIAIINCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YOM_KNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.YOM_KNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'YOM_KNA' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.YOM_KNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KUM_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.KUM_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'KUM_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.KUM_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DHS_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.DHS_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'DHS_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.DHS_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZIP_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.ZIP_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'ZIP_COD' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.ZIP_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.ADR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'ADR1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.ADR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.ADR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'ADR2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.ADR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEL_BNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.TEL_BNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'TEL_BNG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.TEL_BNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAX_BNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.FAX_BNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'FAX_BNG' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.FAX_BNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDI_TIK() As Byte
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.SDI_TIKColumn),Byte)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SDI_TIKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNP_KBN() As Byte
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.TNP_KBNColumn),Byte)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.TNP_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSY_KBN() As Byte
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.SSY_KBNColumn),Byte)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SSY_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HJN_KBN() As Byte
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.HJN_KBNColumn),Byte)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.HJN_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSY_NIN() As Byte
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.HSY_NINColumn),Byte)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.HSY_NINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSY_KKN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.HSY_KKNColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'HSY_KKN' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.HSY_KKNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_KUM_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_KUM_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_KUM_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_KUM_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_ZIP_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_ZIP_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_ZIP_COD' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_ZIP_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_ADR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_ADR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_ADR1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_ADR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_ADR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_ADR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_ADR2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_ADR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_TEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_TELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_TEL' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_FAX' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEC_TNP() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEC_TNPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEC_TNP' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEC_TNPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_KUM_MEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_KUM_MEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_KUM_MEI' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_KUM_MEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_ZIP_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_ZIP_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_ZIP_COD' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_ZIP_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_ADR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_ADR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_ADR1' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_ADR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_ADR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_ADR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_ADR2' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_ADR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_TEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_TELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_TEL' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEI_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.SEI_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'SEI_FAX' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.SEI_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZNN_SIR() As Decimal
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.ZNN_SIRColumn),Decimal)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.ZNN_SIRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSK_KJN() As Decimal
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.HSK_KJNColumn),Decimal)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.HSK_KJNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GND_KGK() As Decimal
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.GND_KGKColumn),Decimal)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.GND_KGKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KJN_HSK() As Decimal
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.KJN_HSKColumn),Decimal)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.KJN_HSKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HTY_HSK() As Decimal
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.HTY_HSKColumn),Decimal)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.HTY_HSKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DTI_YTI_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableM_KUMIAIINView.DTI_YTI_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'M_KUMIAIINView' にある列 'DTI_YTI_DAY' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.DTI_YTI_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEMENT() As Date
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.UPDATEMENTColumn),Date)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.UPDATEMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEPGID() As String
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.UPDATEPGIDColumn),String)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.UPDATEPGIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPDATEUSERCODE() As String
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.UPDATEUSERCODEColumn),String)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.UPDATEUSERCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _CDATE() As Date
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.CDATEColumn),Date)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.CDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UDATE() As Date
            Get
                Return CType(Me(Me.tableM_KUMIAIINView.UDATEColumn),Date)
            End Get
            Set
                Me(Me.tableM_KUMIAIINView.UDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYOM_KNANull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.YOM_KNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYOM_KNANull()
            Me(Me.tableM_KUMIAIINView.YOM_KNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKUM_MEINull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.KUM_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKUM_MEINull()
            Me(Me.tableM_KUMIAIINView.KUM_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDHS_MEINull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.DHS_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDHS_MEINull()
            Me(Me.tableM_KUMIAIINView.DHS_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZIP_CODNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.ZIP_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZIP_CODNull()
            Me(Me.tableM_KUMIAIINView.ZIP_CODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADR1Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.ADR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADR1Null()
            Me(Me.tableM_KUMIAIINView.ADR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADR2Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.ADR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADR2Null()
            Me(Me.tableM_KUMIAIINView.ADR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEL_BNGNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.TEL_BNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEL_BNGNull()
            Me(Me.tableM_KUMIAIINView.TEL_BNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAX_BNGNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.FAX_BNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAX_BNGNull()
            Me(Me.tableM_KUMIAIINView.FAX_BNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHSY_KKNNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.HSY_KKNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHSY_KKNNull()
            Me(Me.tableM_KUMIAIINView.HSY_KKNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_KUM_MEINull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_KUM_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_KUM_MEINull()
            Me(Me.tableM_KUMIAIINView.SEC_KUM_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_ZIP_CODNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_ZIP_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_ZIP_CODNull()
            Me(Me.tableM_KUMIAIINView.SEC_ZIP_CODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_ADR1Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_ADR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_ADR1Null()
            Me(Me.tableM_KUMIAIINView.SEC_ADR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_ADR2Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_ADR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_ADR2Null()
            Me(Me.tableM_KUMIAIINView.SEC_ADR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_TELNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_TELNull()
            Me(Me.tableM_KUMIAIINView.SEC_TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_FAXNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_FAXNull()
            Me(Me.tableM_KUMIAIINView.SEC_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEC_TNPNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEC_TNPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEC_TNPNull()
            Me(Me.tableM_KUMIAIINView.SEC_TNPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_KUM_MEINull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_KUM_MEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_KUM_MEINull()
            Me(Me.tableM_KUMIAIINView.SEI_KUM_MEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_ZIP_CODNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_ZIP_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_ZIP_CODNull()
            Me(Me.tableM_KUMIAIINView.SEI_ZIP_CODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_ADR1Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_ADR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_ADR1Null()
            Me(Me.tableM_KUMIAIINView.SEI_ADR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_ADR2Null() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_ADR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_ADR2Null()
            Me(Me.tableM_KUMIAIINView.SEI_ADR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_TELNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_TELNull()
            Me(Me.tableM_KUMIAIINView.SEI_TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEI_FAXNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.SEI_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEI_FAXNull()
            Me(Me.tableM_KUMIAIINView.SEI_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDTI_YTI_DAYNull() As Boolean
            Return Me.IsNull(Me.tableM_KUMIAIINView.DTI_YTI_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDTI_YTI_DAYNull()
            Me(Me.tableM_KUMIAIINView.DTI_YTI_DAYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class M_KUMIAIINViewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As M_KUMIAIINViewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As M_KUMIAIINViewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As M_KUMIAIINViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace M_KUMIAIINTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class M_KUMIAIINViewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "M_KUMIAIINView"
            tableMapping.ColumnMappings.Add("KUMIAIINCODE", "KUMIAIINCODE")
            tableMapping.ColumnMappings.Add("YOM_KNA", "YOM_KNA")
            tableMapping.ColumnMappings.Add("KUM_MEI", "KUM_MEI")
            tableMapping.ColumnMappings.Add("DHS_MEI", "DHS_MEI")
            tableMapping.ColumnMappings.Add("ZIP_COD", "ZIP_COD")
            tableMapping.ColumnMappings.Add("ADR1", "ADR1")
            tableMapping.ColumnMappings.Add("ADR2", "ADR2")
            tableMapping.ColumnMappings.Add("TEL_BNG", "TEL_BNG")
            tableMapping.ColumnMappings.Add("FAX_BNG", "FAX_BNG")
            tableMapping.ColumnMappings.Add("SDI_TIK", "SDI_TIK")
            tableMapping.ColumnMappings.Add("TNP_KBN", "TNP_KBN")
            tableMapping.ColumnMappings.Add("SSY_KBN", "SSY_KBN")
            tableMapping.ColumnMappings.Add("HJN_KBN", "HJN_KBN")
            tableMapping.ColumnMappings.Add("HSY_NIN", "HSY_NIN")
            tableMapping.ColumnMappings.Add("HSY_KKN", "HSY_KKN")
            tableMapping.ColumnMappings.Add("SEC_KUM_MEI", "SEC_KUM_MEI")
            tableMapping.ColumnMappings.Add("SEC_ZIP_COD", "SEC_ZIP_COD")
            tableMapping.ColumnMappings.Add("SEC_ADR1", "SEC_ADR1")
            tableMapping.ColumnMappings.Add("SEC_ADR2", "SEC_ADR2")
            tableMapping.ColumnMappings.Add("SEC_TEL", "SEC_TEL")
            tableMapping.ColumnMappings.Add("SEC_FAX", "SEC_FAX")
            tableMapping.ColumnMappings.Add("SEC_TNP", "SEC_TNP")
            tableMapping.ColumnMappings.Add("SEI_KUM_MEI", "SEI_KUM_MEI")
            tableMapping.ColumnMappings.Add("SEI_ZIP_COD", "SEI_ZIP_COD")
            tableMapping.ColumnMappings.Add("SEI_ADR1", "SEI_ADR1")
            tableMapping.ColumnMappings.Add("SEI_ADR2", "SEI_ADR2")
            tableMapping.ColumnMappings.Add("SEI_TEL", "SEI_TEL")
            tableMapping.ColumnMappings.Add("SEI_FAX", "SEI_FAX")
            tableMapping.ColumnMappings.Add("ZNN_SIR", "ZNN_SIR")
            tableMapping.ColumnMappings.Add("HSK_KJN", "HSK_KJN")
            tableMapping.ColumnMappings.Add("GND_KGK", "GND_KGK")
            tableMapping.ColumnMappings.Add("KJN_HSK", "KJN_HSK")
            tableMapping.ColumnMappings.Add("HTY_HSK", "HTY_HSK")
            tableMapping.ColumnMappings.Add("DTI_YTI_DAY", "DTI_YTI_DAY")
            tableMapping.ColumnMappings.Add("UPDATEMENT", "UPDATEMENT")
            tableMapping.ColumnMappings.Add("UPDATEPGID", "UPDATEPGID")
            tableMapping.ColumnMappings.Add("UPDATEUSERCODE", "UPDATEUSERCODE")
            tableMapping.ColumnMappings.Add("CDATE", "CDATE")
            tableMapping.ColumnMappings.Add("UDATE", "UDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Model.My.MySettings.Default.DB_FSUISANConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from M_KUMIAIIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where KUMIAIINCODE=@KUMIAIINCODE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KUMIAIINCODE", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "KUMIAIINCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As M_KUMIAIIN.M_KUMIAIINViewDataTable, ByVal KUMIAIINCODE As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (KUMIAIINCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KUMIAIINCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(KUMIAIINCODE,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal KUMIAIINCODE As String) As M_KUMIAIIN.M_KUMIAIINViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (KUMIAIINCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KUMIAIINCODE")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(KUMIAIINCODE,String)
            End If
            Dim dataTable As M_KUMIAIIN.M_KUMIAIINViewDataTable = New M_KUMIAIIN.M_KUMIAIINViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As M_KUMIAIIN, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As M_KUMIAIIN, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As M_KUMIAIIN, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As M_KUMIAIIN) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な"& _ 
                        " TableAdapter インスタンスに設定してください。")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
